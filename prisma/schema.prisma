generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  firstName    String
  lastName     String
  password     String
  phoneNumber  String?        @default("NA")
  country      String?        @default("NA")
  city         String?        @default("NA")
  strategy     String         @default("local")
  role         Role           @default(USER)
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userLevels   UserLevel[]
  userProgress UserProgress[]
  userTasks    UserTask[]
  orders       Order[]
}

model Level {
  id_name    Level_Name  @id
  days       Day[]
  userLevels UserLevel[]
  orders     Order[]
}

model Day {
  id           Int            @id @default(autoincrement())
  dayNumber    Int
  level        Level          @relation(fields: [levelName], references: [id_name], onDelete: Cascade)
  levelName    Level_Name
  tasks        Task[]
  userProgress UserProgress[]

  @@unique([levelName, dayNumber])
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  day         Day        @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId       Int
  userTasks   UserTask[]

  @@unique([dayId, name])
}

model UserLevel {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  level     Level      @relation(fields: [levelName], references: [id_name], onDelete: Cascade)
  levelName Level_Name

  @@unique([userId, levelName])
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  day         Day       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId       Int
  completed   Boolean   @default(false)
  completedAt DateTime?

  @@unique([userId, dayId])
}

model UserTask {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      Int
  completed   Boolean   @default(false)
  completedAt DateTime?

  @@unique([userId, taskId])
}

model Order {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  level         Level         @relation(fields: [levelName], references: [id_name], onDelete: Cascade)
  levelName     Level_Name
  amountCents   Int
  paymentStatus PaymentStatus @default(PENDING)
  paymentDate   DateTime      @default(now())
  paymentId     String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([userId, levelName])
}

model Courses {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  description         String
  stage_1_description String
  stage_2_description String
  price               Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Level_Name {
  LEVEL_A1
  LEVEL_A2
  LEVEL_B1
  LEVEL_B2
  LEVEL_C1
  LEVEL_C2
}
