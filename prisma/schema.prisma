generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  firstName    String
  lastName     String
  password     String
  phoneNumber  String?        @default("+2011111111")
  country      String?        @default("EG")
  city         String?        @default("Cairo")
  strategy     String         @default("local")
  role         Role           @default(USER)
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  levels       Level[]
  userProgress UserProgress[]
  userTasks    UserTask[]
  orders       Order[]        // user payments
}

model Level {
  id          Int       @id @default(autoincrement())
  name        String
  stages      Stage[]   
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  paid        Boolean   @default(false)
  paymentDate DateTime?
}

model Stage {
  id           Int            @id @default(autoincrement())
  name         String
  level        Level          @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId      Int
  days         Day[]
  userProgress UserProgress[]
}

model Day {
  id           Int            @id @default(autoincrement())
  stage        Stage          @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId      Int
  dayNumber    Int
  tasks        Task[]
  userProgress UserProgress[]
}

model Task {
  id        Int        @id @default(autoincrement())
  name      String
  content   String
  day       Day        @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId     Int
  userTasks UserTask[]
}

model UserProgress {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId     Int
  day         Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId       Int
  completed   Boolean  @default(false)
  completedAt DateTime @default(now())

  @@unique([userId, stageId, dayId])
}

model UserTask {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
  completed   Boolean  @default(false)
  completedAt DateTime @default(now())

  @@unique([userId, taskId])
}

model Order {
  id           Int           @id @default(autoincrement())
  items        OrderItem[]
  amountCents  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  paymentStatus PaymentStatus @default(PENDING)
  paymentDate  DateTime?      @default(now())
  paymentId    String?
  
}

model OrderItem {
  id          Int        @id @default(autoincrement())
  name        Level_Name
  amountCents Int
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Level_Name {
  LEVEL_A1
  LEVEL_A2
  LEVEL_B1
  LEVEL_B2
  LEVEL_C1
  LEVEL_C2
}
