
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  username      String         @default("user")
  strategy      String         @default("local")
  role          Role           @default(USER)
  isVerified     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  payments      Payment[]
}

model Course {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  price         Float
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  lessons       Lesson[]
  coverImage    String? // URL to the cover image
}

model Lesson {
  id          Int           @id @default(autoincrement())
  title       String
  content     String // This could be a rich text description or a URL to a video file
  order       Int // To maintain lesson order within a course
  courseId    Int
  course      Course        @relation(fields: [courseId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  startDate DateTime @default(now())
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  userId    Int
  amount    Float
  status    PaymentStatus
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String    @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
